name: build-template.yaml
on:
  workflow_call:
    inputs:
      rversion:
        type: string
        required: true
      build:
        type: string
        required: true
      deploy:
        type: string
        required: true
      buildarm:
        type: string
        required: true
      deployarm:
        type: string
        required: true

jobs:
  build:
    if: ${{ inputs.build == 'yes' }}
    name: build
    runs-on: ubuntu-latest
    env:
      R_VERSION: '${{ inputs.rversion }}'

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 10

    - name: Build
      env:
        TARGET: build
      run: |
        docker compose build bionic

    - name: Test
      env:
        TARGET: test
      run: |
        docker compose build bionic

    - name: Package
      env:
        TARGET: package
      run: |
        docker compose build bionic
        docker compose up bionic

    - name: Upload tar.gz package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.rversion }}-x86_64-targz
        path: output/*.tar.gz

    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.rversion }}-x86_64-deb
        path: output/*.deb

    - name: Upload rpm package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.rversion }}-x86_64-rpm
        path: output/*.rpm

  test:
    name: test
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 10

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.rversion }}-x86_64-*
        path: output
        merge-multiple: true

    - name: Test
      run: |
        rm -f output/*aarch64* output/*arm64*
        docker compose -f docker-compose-test.yaml build
      env:
        COMPOSE_PARALLEL_LIMIT: 4
        REDHAT_ORG_RHEL8: ${{ secrets.REDHAT_ORG }}
        REDHAT_ORG_RHEL9: ${{ secrets.REDHAT_ORG }}
        REDHAT_ACTIVATION_KEY_RHEL8: ${{ secrets.REDHAT_ACTIVATION_KEY_RHEL8 }}
        REDHAT_ACTIVATION_KEY_RHEL9: ${{ secrets.REDHAT_ACTIVATION_KEY_RHEL9 }}

  deploy:
    name: deploy
    if: ${{ inputs.deploy == 'yes' }}
    runs-on: ubuntu-latest
    needs: [ test ]

    steps:

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.rversion }}-x86_64-*
        path: output
        merge-multiple: true

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        repository: r-hub/R
        token: ${{ secrets.DEPLOY_TOKEN }}
        files: |
          output/*amd64.deb
          output/*x86_64.rpm
          output/*x86_64.tar.gz
        name: '${{ inputs.rversion }}'
        tag_name: 'v${{ inputs.rversion }}'

  buildarm:
    name: build (aarch64)
    if: ${{ inputs.buildarm == 'yes' }}
    runs-on: [self-hosted, linux, ARM64]
    container:
      image: "ubuntu:22.04"
      volumes:
        - ${{ github.workspace }}:/${{ github.workspace }}
    env:
      R_VERSION: '${{ inputs.rversion }}'

    steps:

    - name: Install Docker, git
      run: |
        apt-get update && apt-get install -y docker.io docker-compose-v2 git

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 10

    - name: Build
      env:
        TARGET: build
      run: |
        docker compose build bionic

    - name: Test
      env:
        TARGET: test
      run: |
        docker compose build bionic

    - name: Package
      env:
        TARGET: package
      run: |
        cd ${{ github.workspace }}
        docker compose build bionic
        docker compose up bionic

    - name: Upload tar.gz package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.rversion }}-aarch64-targz
        path: output/*.tar.gz

    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.rversion }}-aarch64-deb
        path: output/*.deb

    - name: Upload rpm package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.rversion }}-aarch64-rpm
        path: output/*.rpm

  testarm:
    name: test (aarch64)
    runs-on: ubuntu-latest
    needs: [ buildarm ]
    container:
      image: "ubuntu:22.04"
      volumes:
        - ${{ github.workspace }}:/${{ github.workspace }}

    steps:

    - name: Install Docker
      run: |
        apt-get update && apt-get install -y \
          docker.io docker-compose-v2 docker-buildx

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 10

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.rversion }}-aarch64-*
        path: output
        merge-multiple: true

    - name: Test
      run: |
        rm -f output/*x86_64* output/*amd64*
        docker compose -f docker-compose-test.yaml build
      env:
        DOCKER_DEFAULT_PLATFORM: linux/arm64
        COMPOSE_PARALLEL_LIMIT: 4
        REDHAT_ORG_RHEL8: ${{ secrets.REDHAT_ORG }}
        REDHAT_ORG_RHEL9: ${{ secrets.REDHAT_ORG }}
        REDHAT_ACTIVATION_KEY_RHEL8: ${{ secrets.REDHAT_ACTIVATION_KEY_RHEL8 }}
        REDHAT_ACTIVATION_KEY_RHEL9: ${{ secrets.REDHAT_ACTIVATION_KEY_RHEL9 }}

  deployarm:
    name: deploy (aarch64)
    if: ${{ inputs.deployarm == 'yes' }}
    runs-on: ubuntu-latest
    needs: [ testarm ]
    container:
      image: "ubuntu:22.04"
      volumes:
        - ${{ github.workspace }}:/${{ github.workspace }}

    steps:

    - name: Clean up old artifacts
      run: |
        rm -rf output
        mkdir output

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ inputs.rversion }}-aarch64-*
        path: output
        merge-multiple: true

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        repository: r-hub/R
        token: ${{ secrets.DEPLOY_TOKEN }}
        files: |
          output/*${{ inputs.rversion }}*arm64.deb
          output/*${{ inputs.rversion }}*aarch64.rpm
          output/*${{ inputs.rversion }}*aarch64.tar.gz
        name: "R ${{ inputs.rversion }}"
        tag_name: 'v${{ inputs.rversion }}'
